package subjectstudytime

import (
	"errors"
	"fmt"
	"net/http"
	"reg_system/config"
	"reg_system/entity"
	"time"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

/* ==========================
   üß© DTO / Payload ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Frontend
   ==========================*/

type StudyTimeCreateReq struct {
	SubjectID string `json:"subject_id,omitempty"`         // FK ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ)
	Start     string `json:"start"     binding:"required"` // "YYYY-MM-DD HH:mm" ‡∏´‡∏£‡∏∑‡∏≠ RFC3339
	End       string `json:"end"       binding:"required"`
}

type StudyTimeUpdateReq struct {
	Start *string `json:"start,omitempty"` // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ
	End   *string `json:"end,omitempty"`
}

/* ==========================
   ‚è±Ô∏è helper: parse ‡πÄ‡∏ß‡∏•‡∏≤ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ISO ‡πÅ‡∏•‡∏∞ "YYYY-MM-DD HH:mm")
   ==========================*/

func parseTimeFlexible(s string, loc *time.Location) (time.Time, error) {
	// 1) RFC3339 (ISO)
	if t, err := time.Parse(time.RFC3339, s); err == nil {
		return t.In(loc), nil
	}
	// 2) "YYYY-MM-DD HH:mm" (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ü‡∏£‡∏≠‡∏ô‡∏ï‡πå‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á)
	const layout = "2006-01-02 15:04"
	if t, err := time.ParseInLocation(layout, s, loc); err == nil {
		return t, nil
	}
	return time.Time{}, fmt.Errorf("invalid time format: %s (use RFC3339 or YYYY-MM-DD HH:mm)", s)
}

/* ==========================
   GET /subjects/:subjectId/times
   ‚ñ∂Ô∏è ‡∏î‡∏∂‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤
   ==========================*/

func GetBySubject(c *gin.Context) {
	subjectID := c.Param("subjectId")
	db := config.DB()

	var times []entity.SubjectStudyTime
	res := db.Where("subject_id = ?", subjectID).
		Order("start_at asc").
		Find(&times)

	if res.Error != nil {
		if errors.Is(res.Error, gorm.ErrRecordNotFound) {
			c.JSON(http.StatusNotFound, gin.H{"error": "study times not found"})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"error": res.Error.Error()})
		}
		return
	}
	if res.RowsAffected == 0 {
		// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ 200 ‡πÅ‡∏ï‡πà‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ß‡πà‡∏≤‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞ 404 ‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
		c.JSON(http.StatusOK, []entity.SubjectStudyTime{})
		return
	}

	// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ
	c.JSON(http.StatusOK, times)
}

/* ==========================
   GET /subjects/:subjectId/times/:timeId
   ‚ñ∂Ô∏è ‡∏î‡∏∂‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤
   ==========================*/

func GetOne(c *gin.Context) {
	subjectID := c.Param("subjectId")
	timeID := c.Param("timeId")
	db := config.DB()

	var st entity.SubjectStudyTime
	err := db.Where("subject_id = ? AND id = ?", subjectID, timeID).
		First(&st).Error

	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			c.JSON(http.StatusNotFound, gin.H{"error": "study time not found"})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		}
		c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, st)
}

/* ==========================
   POST /subjects/:subjectId/times
   ‚ñ∂Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£) ‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ
   ==========================*/

func Create(c *gin.Context) {
	subjectID := c.Param("subjectId")
	db := config.DB()

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ subject ‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
	var count int64
	if err := db.Model(&entity.Subjects{}).
		Where("subject_id = ?", subjectID).
		Count(&count).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			c.JSON(http.StatusNotFound, gin.H{"error": "subject not found"})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		}
		return
	}
	if count == 0 {
		c.JSON(http.StatusNotFound, gin.H{"error": "subject not found"})
		return
	}

	// bind body (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á subject_id ‡∏°‡∏≤‡πÉ‡∏ô JSON ‡∏Å‡πá‡πÑ‡∏î‡πâ)
	var req StudyTimeCreateReq
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	loc, _ := time.LoadLocation("Asia/Bangkok")
	st, err := parseTimeFlexible(req.Start, loc)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	et, err := parseTimeFlexible(req.End, loc)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	if !et.After(st) {
		c.JSON(http.StatusBadRequest, gin.H{"error": "end must be after start"})
		return
	}

	item := entity.SubjectStudyTime{
		SubjectID: subjectID,
		StartAt:   st,
		EndAt:     et,
	}

	if err := db.Create(&item).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		}
		return
	}

	c.JSON(http.StatusOK, item)
}

/* ==========================
   PUT /subjects/:subjectId/times/:timeId
   ‚ñ∂Ô∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÅ‡∏Å‡πâ start/end ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏î‡πâ)
   ==========================*/

func Update(c *gin.Context) {
	subjectID := c.Param("subjectId")
	timeID := c.Param("timeId")
	db := config.DB()

	// ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô
	var st entity.SubjectStudyTime
	if err := db.Where("subject_id = ? AND id = ?", subjectID, timeID).
		First(&st).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			c.JSON(http.StatusNotFound, gin.H{"error": "study time not found"})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		}
		return
	}

	// bind body
	var req StudyTimeUpdateReq
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	loc, _ := time.LoadLocation("Asia/Bangkok")
	if req.Start != nil {
		t, err := parseTimeFlexible(*req.Start, loc)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			return
		}
		st.StartAt = t
	}
	if req.End != nil {
		t, err := parseTimeFlexible(*req.End, loc)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			return
		}
		st.EndAt = t
	}
	if !st.EndAt.After(st.StartAt) {
		c.JSON(http.StatusBadRequest, gin.H{"error": "end must be after start"})
		return
	}

	if err := db.Save(&st).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		}
		return
	}

	c.JSON(http.StatusOK, st)
}

/* ==========================
   DELETE /subjects/:subjectId/times/:timeId
   ‚ñ∂Ô∏è ‡∏•‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤
   ==========================*/

func Delete(c *gin.Context) {
	subjectID := c.Param("subjectId")
	timeID := c.Param("timeId")
	db := config.DB()

	res := db.Where("subject_id = ? AND id = ?", subjectID, timeID).
		Delete(&entity.SubjectStudyTime{})

	if res.Error != nil {
		if errors.Is(res.Error, gorm.ErrRecordNotFound) {
			c.JSON(http.StatusNotFound, gin.H{"error": "study time not found"})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"error": res.Error.Error()})
		}
		return
	}
	if res.RowsAffected == 0 {
		c.JSON(http.StatusNotFound, gin.H{"error": "study time not found"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Delete study time success"})
}
